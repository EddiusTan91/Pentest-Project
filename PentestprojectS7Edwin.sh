#!/bin/bash

#Project outline
#~ 1. Map Network Devices and Open Ports 
#~ - Automatically identify the LAN network range 
#~ - Automatically scan the current LAN 
#~ - Enumerate each live host
#~ - Find potential vulnerabilities for each device 
#~ 2. Check for Weak Passwords Usage
#~ - Allow the user to specify a user list
#~ - Allow the user to specify a password list 
#~ - Allow the user to create a password list
#~ - If a login service is available, Brute Force with the password list
#~ - If more than one login service is available, choose the first service 
#~ 3 Results 
#~ - Display general statistics (time of the scan, number of found devices, etc.) 
#~ - Save all the results into a report 
#~ - Allow the user to enter an IP address; display the relevant findings 

#~ functions area
# script startup
# initate an update and upgrade for the machine
function forupdate()
	{
		sudo apt-get -y update 
		sudo apt-get -y upgrade
	}
	
# create a folder where everything will be contained in

function crefldr()
	{
		mkdir PTprobase
		cd PTprobase
		mkdir archive
	}
	
# Installing relevant tools
function instools()
{
	echo "Installing the tools for the job"
	echo "-----Installing NMAP-----"
	sudo apt-get install nmap
	echo "-----Installing masscan-----"
	sudo apt-get install masscan
	echo "-----Installing NMAP-----"
	sudo apt-get install -y nmap
	echo "-----Installing whois-----"
	sudo apt-get install whois
	echo "-----Installing net-tools-----"
	sudo apt-get install net-tools
	echo "-----Removing files that are not required-----"
	sudo apt autoremove
	echo "----------------------------------------------"
	
}

function viewreports()
{
echo "Which report would you like to view? Please input the Target IP for that report"
read rsip
open "$(ls |grep $rsip)"
echo "All reports are saved in:"
pwd
}


######## Start
## scan local lan
#  Nmap -sP 
#  
#
### Enumerate
## nmap each target or 1 specified target
## masscan each ip from scanned list or 1 specified target
## 
#### Exploit
### nse
### msfconsole
### netcat
###
##### Escalate 
#### msfconsole
#### 

## Testing
function test1()
	{ echo test 
}

function viewresultsscan()
{ 
		cd PTprobase | cat networkscanresults.scan
 
}

# functions for calculating the CIDR
calcidr=$(ip r | grep kernel | awk '{print $(1)}')

# functions for Nmap for scanning the network
function runnetworkscan()
{
	sudo nmap -sP $calcidr -sV -oG networkscanresults.scan
	cat networkscanresults.scan | grep Host: | awk '{ print $2 }' > tarip.txt 
	echo "Active IP addresses on the network:" 
	cat tarip.txt
}

function runnmapenum()
{
	sudo nmap $enip -p- --open -sV -oN enumresults.txt -oX enumresults.xml
	echo "Scanned results are saved here:"
	pwd
}

function runnmapvulnsimplescan()
{	
	sudo nmap $enip --script=ssh-auth-methods -p22 -oN sshvulnresults.txt
	echo "#####################################################"
	sudo nmap $enip --script=ftp-libopie -p21 -oN ftpvulnresults.txt
	echo "#####################################################"
	sudo nmap $enip --script=telnet-ntlm-info -p23 -oN telnetvulnresults.txt
	echo "#####################################################"
	echo "scanned results are saved here:"
	pwd
}

function runnmapvulnfull()
{	
	sudo nmap $enip --script=vuln -p- -oN vulnresults.txt
	echo "scanned results are saved here:"
	pwd
}

function runenum4linux
{
	sudo enum4linux $enip >> enum4linuxscanrs.txt
}

# Using searchsploit to help gather the potential vulnerbilities of the target machine
#~ function ssscanner()
#~ {
	#~ echo "what type of machine are we looking at?"
	#~ read mactype
	#~ searchsploit -x --nmap enumresults.xml | grep $mactype | grep remote | grep *.sh
#~ }


#functions for the user data collection

 function createurpw()
{
				echo "please input password"
				read password 
				echo $password > crtedpw.lst
				echo " Please input username"
				read userlst 
				echo $userlst > crteduser.lst
}

function inputurpwlist()
{
				echo "please input password list directory e.g /home/kali/Desktop/PT/PTprobase/scanning/password.lst"
				read passdir 
				echo " Please input username list directory e.g /home/kali/Desktop/PT/PTprobase/scanning/password.lst"
				read userdir 
}

# The reason why the dflist is so short is due to the scan time. While I should only do for 1 open port, I did the brute force attack for 3. 
function dfpwlist()
{ 
	echo 	"msfadmin
msfadmin
12345
kali
123456789
asdfghjkl
password1
qwerty123456
" >> dflist.txt
}

function userinlist()
{
	items=(	"Input a password file and a user file"
			"create a new password and user file"
			"Use default password file")

while true; do
    select item in "${items[@]}" Quit
    do
        case $REPLY in
            1) inputurpwlist; 	echo 'using user designated files'
				hydra -L $userdir -P $passdir $enip ssh -vV  -o bfsshresult.txt
				hydra -L $userdir -P $passdir $enip ftp -vV  -o bfftpresult.txt
				hydra -L $userdir -P $passdir $enip telnet -vV  -o bftelnetresult.txt; 
				break 2;;
				
            2) createurpw;
				echo 'using user created files'
				hydra -L crteduser.lst -P crtedpw.lst $enip ssh -vV  -o bfsshresult.txt
				hydra -L crteduser.lst -P crtedpw.lst $enip ftp -vV  -o bfftpresult.txt
				hydra -L crteduser.lst -P crtedpw.lst $enip telnet -vV  -o bftelnetresult.txt; 
				break 2;;
				
            3) echo "default list is created";
            	echo 'using default files'
				hydra -L dflist.txt -P dflist.txt $enip ssh -vV -o bfsshresult.txt
				hydra -L dflist.txt -P dflist.txt $enip ftp -vV -o bfftpresult.txt
				hydra -L dflist.txt -P dflist.txt $enip telnet -vV -o bftelnetresult.txt; 
				break 2;;
            $((${#items[@]}+1))) echo "We're done!"; break 2;;
            *) echo "Ooops - unknown choice $REPLY"; break 2;
        esac
    done
done
}

#initalisation 
forupdate
instools
crefldr
echo "locate this file if you leave the container" >> needdir.txt

## clear the screen after all the start up
clear
pwd
#listing the user's data

echo "##############################################################################"
echo "User infromation"
echo "##############################################################################"
pwd
user=$(hostname)
userip=$(hostname -I)
useros=$(cat /etc/*_version)
usernmask=$(ifconfig | grep broadcast | awk '{print $(NF-2)}')
echo "Welcome, $user "
echo "Your OS version is $useros"
echo "Your IP address is $userip"
echo "Your netmask is $usernmask"
echo "Your CIDR is $calcidr" 

## scanning 
echo "##############################################################################"
echo "Starting network scans with NMAP"
echo "##############################################################################"

pwd
runnetworkscan

echo "##############################################################################"
echo "Starting enumeration "
echo "##############################################################################"

pwd
## enumerating
echo "What is the target IP?"
read enip 
runnmapenum
runenum4linux

echo "##############################################################################"
echo "Starting vulnerbility scans with NMAP"
echo "##############################################################################"

pwd
runnmapvulnfull
#~ ssscanner

echo "##############################################################################"
echo "Starting Brute Force attack on target."
echo "##############################################################################"
# The user data input 
dfpwlist
userinlist

echo "##############################################################################"
echo "End of Bruteforce attack. Report is generated."
echo "##############################################################################"


# the script below is for generating the Report and to set up the script for the next scan by removing files that will conflict with the next scan.

echo "##############################################################################">> Report.txt
echo "User Information" >> Report.txt
echo "##############################################################################" >> Report.txt
echo "Date & Time of report:" >> Report.txt
date >> Report.txt
echo "Your OS version is $useros" >> Report.txt
echo "Your IP address is $userip" >> Report.txt
echo "Your netmask is $usernmask" >> Report.txt
echo "Your CIDR is $calcidr" >> Report.txt

echo "##############################################################################">> Report.txt
echo "Report Information" >> Report.txt
echo "##############################################################################" >> Report.txt
echo "Date & Time of report:" >> Report.txt
date >> Report.txt
echo "Target IP Address:" >> Report.txt
echo "$enip">> Report.txt
echo "Number of devices found on network:" >> Report.txt
cat tarip.txt | wc -l >> Report.txt
echo " Time taken for network scan:" >> Report.txt
cat networkscanresults.scan | grep scanned | awk '{print $(NF-1), $(NF-0)}' >> Report.txt

echo "##############################################################################">> Report.txt
echo "Enumeration Information" >> Report.txt
echo "##############################################################################" >> Report.txt
echo " Target IP Address:" >> Report.txt
echo "$enip" >> Report.txt
echo "The enum4linux report can be found at the follow address:" >> Report.txt
locate enum4linuxscanrs.txt >> Report.txt
echo "Number of open ports on the target machine:" >> Report.txt
cat enumresults.txt | grep tcp | grep open | wc -l >> Report.txt
echo "Ports that are opened:" >> Report.txt
cat enumresults.txt | grep tcp | grep open >> Report.txt
echo "Results for vulnerabilities scan using NMAP."
cat vulnresults.txt >> Report.txt
echo "##############################################################################">> Report.txt
echo "Bruteforce Information" >> Report.txt
echo "##############################################################################" >> Report.txt
echo "Successful Brute Force attempts with ssh, ftp and telnet" >> Report.txt
echo "Bruteforce attacks for SSH" >> Report.txt
cat bfsshresult.txt >> Report.txt
echo "Bruteforce attacks for FTP" >> Report.txt
cat bfftpresult.txt >> Report.txt
echo "Bruteforce attacks for Telnet" >> Report.txt

cat bftelnetresult.txt >> Report.txt

echo "##############################################################################">> Report.txt
echo "End of report" >> Report.txt
echo "##############################################################################" >> Report.txt

mv Report.txt "$(date +"%m-%d-%y")"_"$enip"_report.txt

# To clean out the files that will cause problems on the second run
rm bfsshresult.txt
rm bfftpresult.txt
rm bftelnetresult.txt 

# A menu to finish up and allow the user to see the reports of past scans and other IP
viewreports

echo "##############################################################################"
echo "End of PenTest Project"
echo "##############################################################################"


#Credits
# cheatsheet : https://www.golinuxcloud.com/linux-commands-cheat-sheet/
# simple menu : https://www.baeldung.com/linux/shell-script-simple-select-menu
# default password list is adapted from : https://en.wikipedia.org/wiki/List_of_the_most_common_passwords
# Renaming files with date : https://unix.stackexchange.com/questions/255300/rename-file-to-current-date-in-one-bash-command
# removal of files : 

# Instructor: Centre for CyberSecurity James Lim

#~ ### Using some tools that for available online
#~ ## credits: https://www.youtube.com/watch?v=3U1pJ-eJrAU
#~ ## credits source for video: https://null-byte.wonderhowto.com/how-to/easily-detect-cves-with-nmap-scripts-0181925/

# This Script was created and maintain by Edwin Tan student code S5/2407
